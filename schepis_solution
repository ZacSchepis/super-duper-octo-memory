diff --git a/Makefile b/Makefile
index 09d790c..8da47d1 100644
--- a/Makefile
+++ b/Makefile
@@ -158,6 +158,8 @@ _forktest: forktest.o $(ULIB)
 
 mkfs: mkfs.c fs.h
 	gcc -Werror -Wall -o mkfs mkfs.c
+lazy:
+	echo "./schedtest" | make qemu-nox
 
 # Prevent deletion of intermediate files, e.g. cat.o, after first build, so
 # that disk image changes after first build are persistent until clean.  More
@@ -167,6 +169,7 @@ mkfs: mkfs.c fs.h
 
 UPROGS=\
 	_cat\
+	_schedtest\
 	_echo\
 	_forktest\
 	_grep\
@@ -217,7 +220,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
diff --git a/proc.c b/proc.c
index 806b1b1..3453b56 100644
--- a/proc.c
+++ b/proc.c
@@ -6,12 +6,10 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
-
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
-
 static struct proc *initproc;
 
 int nextpid = 1;
@@ -64,7 +62,22 @@ myproc(void) {
   popcli();
   return p;
 }
-
+int getpinfo(struct pstat *stats) {
+  struct proc *p;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state == UNUSED) {
+      stats->inuse[p->pid] =0;
+  } else {
+      stats->inuse[p->pid]=1;
+  }
+    stats->pid[p->pid] = p->pid;
+    stats->tickets[p->pid] = p->tickets;
+    stats->ticks[p->pid] = p->ticks;
+  }
+  release(&ptable.lock);
+  return 0;
+}
 //PAGEBREAK: 32
 // Look in the process table for an UNUSED proc.
 // If found, change state to EMBRYO and initialize
@@ -77,7 +90,7 @@ allocproc(void)
   char *sp;
 
   acquire(&ptable.lock);
-
+  
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
     if(p->state == UNUSED)
       goto found;
@@ -88,9 +101,8 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
   release(&ptable.lock);
-
+  p->tickets = 1;
   // Allocate kernel stack.
   if((p->kstack = kalloc()) == 0){
     p->state = UNUSED;
@@ -138,7 +150,6 @@ userinit(void)
   p->tf->eflags = FL_IF;
   p->tf->esp = PGSIZE;
   p->tf->eip = 0;  // beginning of initcode.S
-
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
 
@@ -310,7 +321,13 @@ wait(void)
     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
   }
 }
-
+int unsigned long randstate = 2;
+int
+rnJesus()
+{
+  randstate = randstate * 1103515245 + 12345;
+  return (unsigned int)(randstate / 65536) % 32768;
+}
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
@@ -319,42 +336,66 @@ wait(void)
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
+//THIS IS MY SCHEDULER but right now
+// it is built the same as the original
 void
 scheduler(void)
 {
+  // struct variables
   struct proc *p;
+  struct proc *runnable[NPROC];
   struct cpu *c = mycpu();
   c->proc = 0;
-  
+
+  // ints
+  int ticket_tracker[NPROC];
+  int ticket_total, count, winningnum;
   for(;;){
     // Enable interrupts on this processor.
     sti();
-
     // Loop over process table looking for process to run.
+    ticket_total = 0;
+    count = 0;
+    winningnum = 0;
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
+    for(p = ptable.proc; p< &ptable.proc[NPROC]; p++){
+      if(p->state == RUNNABLE){
+        runnable[count] = p;
+	ticket_tracker[count++] = ticket_total + p->tickets;
+	ticket_total += p->tickets;
         continue;
+      }
+    }
+    c->proc =0;
+    if(count == 0){
+      release(&ptable.lock);
+      continue;
+    }
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
-
+      winningnum = rnJesus() % ticket_total;
+    for(int j=0; j < count; j++){
+      if(ticket_tracker[j] > winningnum){
+        p = runnable[j];
+        c->proc = p;
+        switchuvm(p);
+        p->state = RUNNING;
+        p->ticks++;
+        swtch(&(c->scheduler), p->context);
+        switchkvm();
+        c->proc =0;
+        break;
+      }
       // Process is done running for now.
       // It should have changed its p->state before coming back.
-      c->proc = 0;
     }
     release(&ptable.lock);
-
   }
 }
 
+
 // Enter scheduler.  Must hold only ptable.lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -532,3 +573,6 @@ procdump(void)
     cprintf("\n");
   }
 }
+#include "types.h"
+#include "defs.h"
+#include "param.h"
diff --git a/proc.h b/proc.h
index 1647114..00a30a9 100644
--- a/proc.h
+++ b/proc.h
@@ -1,3 +1,4 @@
+#include "pstat.h"
 // Per-CPU state
 struct cpu {
   uchar apicid;                // Local APIC ID
@@ -49,8 +50,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;
+  int ticks;
 };
-
+int getpinfo(struct pstat *stats);
 // Process memory is laid out contiguously, low addresses first:
 //   text
 //   original data and bss
diff --git a/syscall.c b/syscall.c
index ee85261..7489300 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,7 +103,8 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
-
+extern int sys_settickets(void);
+extern int sys_getpinfo(void);
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
 [SYS_exit]    sys_exit,
@@ -126,6 +127,8 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..7926b7f 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
diff --git a/sysfile.c b/sysfile.c
index bfe61b7..7a71d83 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -15,7 +15,8 @@
 #include "sleeplock.h"
 #include "file.h"
 #include "fcntl.h"
-
+#include "pstat.h"
+struct pstat master_stat;
 // Fetch the nth word-sized system call argument as a file descriptor
 // and return both the descriptor and the corresponding struct file.
 static int
@@ -78,6 +79,7 @@ sys_read(void)
   return fileread(f, p, n);
 }
 
+
 int
 sys_write(void)
 {
diff --git a/sysproc.c b/sysproc.c
index 0686d29..102da75 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,7 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
-
+#include "pstat.h"
 int
 sys_fork(void)
 {
@@ -42,6 +42,27 @@ sys_getpid(void)
   return myproc()->pid;
 }
 
+int
+sys_settickets(void)
+{
+  int n;
+  if(argint(0, &n) < 0)
+	  return -1;
+  if(n < 1)
+	  return -1;
+  myproc()->tickets = n;
+  return 0;
+}
+
+int
+sys_getpinfo(void)
+{
+  struct pstat *ps;
+  if (argptr(0, (void *)&ps, sizeof(*ps)) < 0)
+     return -1;
+  return getpinfo(ps);
+}
+
 int
 sys_sbrk(void)
 {
diff --git a/user.h b/user.h
index 4f99c52..a33380b 100644
--- a/user.h
+++ b/user.h
@@ -1,6 +1,6 @@
 struct stat;
 struct rtcdate;
-
+struct pstat;
 // system calls
 int fork(void);
 int exit(void) __attribute__((noreturn));
@@ -23,7 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-
+int settickets(int);
+int getpinfo(struct pstat*);
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..da1037d 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getpinfo)
+SYSCALL(settickets)
