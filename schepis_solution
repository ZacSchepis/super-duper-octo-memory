diff --git a/Makefile b/Makefile
index 09d790c..8da47d1 100644
--- a/Makefile
+++ b/Makefile
@@ -158,6 +158,8 @@ _forktest: forktest.o $(ULIB)
 
 mkfs: mkfs.c fs.h
 	gcc -Werror -Wall -o mkfs mkfs.c
+lazy:
+	echo "./schedtest" | make qemu-nox
 
 # Prevent deletion of intermediate files, e.g. cat.o, after first build, so
 # that disk image changes after first build are persistent until clean.  More
@@ -167,6 +169,7 @@ mkfs: mkfs.c fs.h
 
 UPROGS=\
 	_cat\
+	_schedtest\
 	_echo\
 	_forktest\
 	_grep\
@@ -217,7 +220,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
diff --git a/proc.c b/proc.c
index 806b1b1..3453b56 100644
--- a/proc.c
+++ b/proc.c
@@ -6,12 +6,10 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
-
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
-
 static struct proc *initproc;
 
 int nextpid = 1;
@@ -64,7 +62,22 @@ myproc(void) {
   popcli();
   return p;
 }
-
+int getpinfo(struct pstat *stats) {
+  struct proc *p;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state == UNUSED) {
+      stats->inuse[p->pid] =0;
+  } else {
+      stats->inuse[p->pid]=1;
+  }
+    stats->pid[p->pid] = p->pid;
+    stats->tickets[p->pid] = p->tickets;
+    stats->ticks[p->pid] = p->ticks;
+  }
+  release(&ptable.lock);
+  return 0;
+}
 //PAGEBREAK: 32
 // Look in the process table for an UNUSED proc.
 // If found, change state to EMBRYO and initialize
@@ -77,7 +90,7 @@ allocproc(void)
   char *sp;
 
   acquire(&ptable.lock);
-
+  
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
     if(p->state == UNUSED)
       goto found;
@@ -88,9 +101,8 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
   release(&ptable.lock);
-
+  p->tickets = 1;
   // Allocate kernel stack.
   if((p->kstack = kalloc()) == 0){
     p->state = UNUSED;
@@ -138,7 +150,6 @@ userinit(void)
   p->tf->eflags = FL_IF;
   p->tf->esp = PGSIZE;
   p->tf->eip = 0;  // beginning of initcode.S
-
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
 
@@ -310,7 +321,13 @@ wait(void)
     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
   }
 }
-
+int unsigned long randstate = 2;
+int
+rnJesus()
+{
+  randstate = randstate * 1103515245 + 12345;
+  return (unsigned int)(randstate / 65536) % 32768;
+}
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
@@ -319,42 +336,66 @@ wait(void)
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
+//THIS IS MY SCHEDULER but right now
+// it is built the same as the original
 void
 scheduler(void)
 {
+  // struct variables
   struct proc *p;
+  struct proc *runnable[NPROC];
   struct cpu *c = mycpu();
   c->proc = 0;
-  
+
+  // ints
+  int ticket_tracker[NPROC];
+  int ticket_total, count, winningnum;
   for(;;){
     // Enable interrupts on this processor.
     sti();
-
     // Loop over process table looking for process to run.
+    ticket_total = 0;
+    count = 0;
+    winningnum = 0;
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
+    for(p = ptable.proc; p< &ptable.proc[NPROC]; p++){
+      if(p->state == RUNNABLE){
+        runnable[count] = p;
+	ticket_tracker[count++] = ticket_total + p->tickets;
+	ticket_total += p->tickets;
         continue;
+      }
+    }
+    c->proc =0;
+    if(count == 0){
+      release(&ptable.lock);
+      continue;
+    }
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
-
+      winningnum = rnJesus() % ticket_total;
+    for(int j=0; j < count; j++){
+      if(ticket_tracker[j] > winningnum){
+        p = runnable[j];
+        c->proc = p;
+        switchuvm(p);
+        p->state = RUNNING;
+        p->ticks++;
+        swtch(&(c->scheduler), p->context);
+        switchkvm();
+        c->proc =0;
+        break;
+      }
       // Process is done running for now.
       // It should have changed its p->state before coming back.
-      c->proc = 0;
     }
     release(&ptable.lock);
-
   }
 }
 
+
 // Enter scheduler.  Must hold only ptable.lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -532,3 +573,6 @@ procdump(void)
     cprintf("\n");
   }
 }
+#include "types.h"
+#include "defs.h"
+#include "param.h"
diff --git a/proc.h b/proc.h
index 1647114..00a30a9 100644
--- a/proc.h
+++ b/proc.h
@@ -1,3 +1,4 @@
+#include "pstat.h"
 // Per-CPU state
 struct cpu {
   uchar apicid;                // Local APIC ID
@@ -49,8 +50,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;
+  int ticks;
 };
-
+int getpinfo(struct pstat *stats);
 // Process memory is laid out contiguously, low addresses first:
 //   text
 //   original data and bss
diff --git a/pstat.h b/pstat.h
new file mode 100644
index 0000000..b1199a3
--- /dev/null
+++ b/pstat.h
@@ -0,0 +1,13 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+  int inuse[NPROC];   // whether this slot of the process table is in use (1 or 0)
+  int tickets[NPROC]; // the number of tickets this process has
+  int pid[NPROC];     // the PID of each process 
+  int ticks[NPROC];   // the number of ticks each process has accumulated 
+};
+
+#endif // _PSTAT_H_
diff --git a/schedtest.c b/schedtest.c
new file mode 100644
index 0000000..5767dd4
--- /dev/null
+++ b/schedtest.c
@@ -0,0 +1,200 @@
+#include "param.h"
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fs.h"
+#include "fcntl.h"
+#include "syscall.h"
+#include "pstat.h"
+
+#define stdout 1
+
+//#define I_AM_UBER
+
+
+struct pstat stats;
+int tickets[] = {30, 20, 10};
+#define NKIDS sizeof(tickets)/sizeof(tickets[0])
+int kids[NKIDS];
+
+int
+findprocent(struct pstat *p, int pid) {
+  for (int i = 0; i < NPROC; i++)
+    if (pid == p->pid[i] && p->inuse[i])
+    {
+	    return i;
+    }	    
+  return -1;
+}
+
+int
+create_child(int tickets) {
+  int pid = fork();
+
+  if (pid == 0) {
+    // child
+    settickets(tickets);
+    getpinfo(&stats);
+
+    int procent = findprocent(&stats, getpid());
+    if (procent == -1) {
+      printf(stdout, "can't find procent for %d\n", getpid());
+    }
+    if (stats.tickets[procent] != tickets)
+      printf(stdout, "pid=%d has %d tickets (should be %d)\n", getpid(), stats.tickets[procent], tickets);
+
+    if (stats.inuse[procent] != 1)
+      printf(stdout, "pid=%d isn't marked as inuse (expected %d got %d)\n", getpid(), 1, stats.inuse[procent]);
+
+    for (;;) {
+    }
+  } else if (pid < 0) {
+    printf(stdout, "fork failed\n");
+    return -1;
+  } else
+    return pid;
+}
+
+int
+main(int argc, char *argv[])
+{
+  char *pfx = "";
+  int exitval = 0;
+  void *v = (void *)(0xdeadbeef);
+
+#ifdef I_AM_UBER
+  unsigned long long ts = 0;
+
+  if (settimestamp(v) >= 0) {
+    printf(stdout, "error: settimestamp(invalid) returned success\n");
+    exitval = 1;
+  }
+
+  ts = 0;
+  if (settimestamp(&ts) < 0) {
+    printf(stdout, "error: settimestamp(valid) did not succeed\n");
+    exitval = 1;
+  }
+
+  if (gettimestamp(v) >= 0) {
+    printf(stdout, "error: gettimestamp(invalid) returned success\n");
+    exitval = 1;
+  }
+
+  ts = 0;
+  if (gettimestamp(&ts) < 0) {
+    printf(stdout, "error: gettimestamp(valid) did not succeed\n");
+    exitval = 1;
+  }
+
+  ts = 0x1122334455667788;
+  settimestamp(&ts);
+  ts = 0;
+  gettimestamp(&ts);
+  if (ts != 0x1122334455667788) {
+    printf(stdout, "error: no round trip on timestamp\n");
+    exitval = 1;
+  }
+  printf(stdout, "timestamp: %x:%x\n", (unsigned)(ts >> 32),
+		  (unsigned)(ts));
+#endif
+
+  if (getpinfo(v) == 0) {
+    printf(stdout, "error: getpinfo(invalidptr) returned 0\n");
+    exitval = 1;
+  }
+
+  if (getpinfo(&stats) == -1) {
+    printf(stdout, "error: getpinfo(validptr) didn't return 0\n");
+    exitval = 1;
+  }
+
+  int procent = findprocent(&stats, getpid());
+  if (procent == -1) {
+    printf(stdout, "can't find procent for %d\n", getpid());
+    exitval = 1;
+  }
+
+  if (stats.tickets[procent] != 1) {
+    printf(stdout, "this process has %d tickets (should be 1)\n", stats.tickets[procent]);
+    exitval = 1;
+  }
+  if (stats.inuse[procent] != 1) {
+    printf(stdout, "this process isn't marked as inuse (expected %d, got %d)\n",
+		   1, stats.tickets[procent]);
+    exitval = 1;
+  }
+
+  if (settickets(-1) == 0) {
+    printf(stdout, "error: settickets(-1) did not return -1\n");
+    getpinfo(&stats);
+    if (stats.tickets[procent] <= 0)
+      printf(stdout, "error: this process has %d tickets\n", stats.tickets[procent]);
+    exitval = 1;
+  }
+  if (settickets(0) == 0) {
+    printf(stdout, "error: settickets(0) did not return -1\n");
+    getpinfo(&stats);
+    if (stats.tickets[procent] <= 0)
+      printf(stdout, "error: this process has %d tickets\n", stats.tickets[procent]);
+    exitval = 1;
+  }
+
+  for (int i = 0; i < NKIDS; i++)
+    kids[i] = -1;
+
+#ifdef I_AM_UBER
+  ts = 0;
+  if (settimestamp(&ts) != 0) {
+    printf(stdout, "settimestamp failed\n");
+    exitval = 1;
+  }
+#endif
+
+  for (int i = 0; i < NKIDS; i++) {
+    kids[i] = create_child(tickets[i]);
+    if (kids[i] == -1)
+      goto out;
+  }
+
+  printf(stdout, "created ");
+  for (int i = 0; i < NKIDS; i++)
+    printf(stdout, " pid=%d,tickets=%d", kids[i], tickets[i]);
+  printf(stdout, "\n");
+
+  for (int i = 0; i < 100; i++) {
+    pfx = "";
+    getpinfo(&stats);
+    for (int i = 0; i < NPROC; i++) {
+      if (stats.inuse[i] == 0)
+        continue;
+      printf(stdout, "%s%d(%d,%d)", pfx,stats.pid[i],
+             stats.tickets[i], stats.ticks[i]);
+      pfx = " ";
+    }
+    printf(stdout, "\n");
+    sleep(25);
+  }
+
+out:
+  for (int i = 0; i < NKIDS; i++) {
+    if (kids[i] == -1)
+      continue;
+    kill(kids[i]);
+    wait();
+    kids[i] = -1;
+  }
+
+#ifdef I_AM_UBER
+  if (gettimestamp(&ts) < 0) {
+    printf(stdout, "error: gettimestamp failed\n");
+    exitval = 1;
+  }
+  printf(stdout, "timestamp: %x:%x\n", (unsigned)(ts >> 32), (unsigned)ts);
+#endif
+
+  if (exitval != 0)
+    printf(stdout, "At least one test failed, sorry.\n");
+
+  exit();
+}
diff --git a/syscall.c b/syscall.c
index ee85261..7489300 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,7 +103,8 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
-
+extern int sys_settickets(void);
+extern int sys_getpinfo(void);
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
 [SYS_exit]    sys_exit,
@@ -126,6 +127,8 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..7926b7f 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
diff --git a/sysfile.c b/sysfile.c
index bfe61b7..7a71d83 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -15,7 +15,8 @@
 #include "sleeplock.h"
 #include "file.h"
 #include "fcntl.h"
-
+#include "pstat.h"
+struct pstat master_stat;
 // Fetch the nth word-sized system call argument as a file descriptor
 // and return both the descriptor and the corresponding struct file.
 static int
@@ -78,6 +79,7 @@ sys_read(void)
   return fileread(f, p, n);
 }
 
+
 int
 sys_write(void)
 {
diff --git a/sysproc.c b/sysproc.c
index 0686d29..102da75 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,7 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
-
+#include "pstat.h"
 int
 sys_fork(void)
 {
@@ -42,6 +42,27 @@ sys_getpid(void)
   return myproc()->pid;
 }
 
+int
+sys_settickets(void)
+{
+  int n;
+  if(argint(0, &n) < 0)
+	  return -1;
+  if(n < 1)
+	  return -1;
+  myproc()->tickets = n;
+  return 0;
+}
+
+int
+sys_getpinfo(void)
+{
+  struct pstat *ps;
+  if (argptr(0, (void *)&ps, sizeof(*ps)) < 0)
+     return -1;
+  return getpinfo(ps);
+}
+
 int
 sys_sbrk(void)
 {
diff --git a/user.h b/user.h
index 4f99c52..a33380b 100644
--- a/user.h
+++ b/user.h
@@ -1,6 +1,6 @@
 struct stat;
 struct rtcdate;
-
+struct pstat;
 // system calls
 int fork(void);
 int exit(void) __attribute__((noreturn));
@@ -23,7 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-
+int settickets(int);
+int getpinfo(struct pstat*);
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..da1037d 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getpinfo)
+SYSCALL(settickets)
